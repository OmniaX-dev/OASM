.include_guard(__timing__oasm__)

.include [system.oasm]

//FPS_Manager structure
.alias __OM_FPS_DELTA_BASE = 1000
.data = reserve(__om_fps, __om_fps_delta)
.macro SetFPS(__fps) mem,Addr_Const,__om_fps,$(__fps) "&#" mem,Addr_Const,__om_fps_delta,#__OM_FPS_DELTA_BASE "&#" div,Addr_Addr,__om_fps_delta,__om_fps
.macro CurrentTime(__out_addr) cmd,Const_Const,GetRunningTime,0 "&#" mem,Addr_Reg,$(__out_addr),R31
.macro WaitForFrame(__time_1, __time_2) call,Const_Const,__om_delay_on_time_diff,2,Single_Addr,$(__time_1),Single_Addr,$(__time_2)

//Function to sleep for the rest of the frame if it took less time than __om_fps_delta
:__om_delay_on_time_diff:
	pop, Single_Reg, R29 //time2
	pop, Single_Reg, R28 //time1
	mem, Reg_Reg,	R27,R29 //time diff

	sub,		Reg_Reg,			R27,					R28

	cmp,		Reg_Addr,			R27,					__om_fps_delta
	jmp,		Single_Const,		JMP_GREATER_OR_EQUALS,	__exceeded_frame_time

	mem,		Reg_Addr,			R28,					__om_fps_delta
	sub,		Reg_Reg,			R28,					R27
	mem,		Reg_Const,			R31,					TU_MILLISECONDS
	cmd,		Const_Reg,			Sleep,					R28
	ret,		Single_Const,		True
:__exceeded_frame_time:
	ret, 		Single_Const, 		False
//end __om_delay_on_time_diff

.close_include_guard
