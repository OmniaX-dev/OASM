.include_guard(oasm_test_1)

.command(request, all=63)

.data = reserve(max, _t1, _t2, next, i, text)
.data = load_string(text, "Fibonacci series:")

jmp,				Single_Const,		JMP_UNCONDITIONAL,			main_prog
//--------------------------------------------------------------------------------------
:fibonacci_series:
	pop,			Single_Reg,			R0

	cmd,			Const_Addr,			PrintStringToConsole,		text
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	cmd,			Const_Const,		PrintIntToConsole,			0
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	cmd,			Const_Const,		PrintIntToConsole,			1
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	cmd,			Const_Const,		PrintIntToConsole,			2
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	mem,			Addr_Const,			i,							3
	mem,			Addr_Const,			_t1,						1
	mem,			Addr_Const,			_t2,						2

	:for_loop:
		cmp,		Addr_Reg,			i,							R0
		jmp,		Single_Const,		JMP_GREATER_OR_EQUALS,		end_loop
		inc,		Single_Addr,		i
		mem,		Addr_Addr,			next,						_t1
		add,		Addr_Addr,			next,						_t2
		mem,		Addr_Addr,			_t1,						_t2
		mem,		Addr_Addr,			_t2,						next
		cmd,		Const_Addr,			PrintIntToConsole,			next
		cmd,		Const_Const,		PrintNewLineToConsole,		0
		jmp,		Single_Const,		JMP_UNCONDITIONAL,			for_loop
	:end_loop:
	ret,			Single_Const,		0
//----------------------------END FIBONACCI_SERIES--------------------------------------

:main_prog:
	call,				Const_Const,		fibonacci_series,			1,			Single_Const,10
	call,				Const_Const,		fibonacci_series,			1,			Single_Const,15
	call,				Const_Const,		fibonacci_series,			1,			Single_Const,20

	end,			Single_Const,		0xCACA

.close_include_guard