.include_guard(oasm_test_1)

.command(request, all=63)

.data = reserve(max, _t1, _t2, next, i, fibo_text, pow_text)
.data = load_string(fibo_text, "Fibonacci series:")
.data = load_string(pow_text, "  -->POWER = ")



//--------------------------------------------------------------------------------------
:fibonacci_series:
	pop,			Single_Reg,			R0
	cmd,			Const_Addr,			PrintStringToConsole,		fibo_text
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	cmd,			Const_Const,		PrintIntToConsole,			0
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	cmd,			Const_Const,		PrintIntToConsole,			1
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	cmd,			Const_Const,		PrintIntToConsole,			2
	cmd,			Const_Const,		PrintNewLineToConsole,		0

	mem,			Addr_Const,			i,							3
	mem,			Addr_Const,			_t1,						1
	mem,			Addr_Const,			_t2,						2

	:for_loop:
		cmp,		Addr_Reg,			i,							R0
		jmp,		Single_Const,		JMP_GREATER_OR_EQUALS,		end_loop
		inc,		Single_Addr,		i
		mem,		Addr_Addr,			next,						_t1
		call,		Const_Const,		sum_numbers,				2,			Single_Addr,next,  Single_Addr,_t2
		mem,		Addr_Reg,			next,						RV
		mem,		Addr_Addr,			_t1,						_t2
		mem,		Addr_Addr,			_t2,						next
		cmd,		Const_Addr,			PrintIntToConsole,			next
		cmd,		Const_Const,		PrintNewLineToConsole,		0
		jmp,		Single_Const,		JMP_UNCONDITIONAL,			for_loop
	:end_loop:
	ret,			Single_Const,		0
//----------------------------END FIBONACCI_SERIES--------------------------------------



//--------------------------------------------------------------------------------------
:sum_numbers:
	pop,			Single_Reg,			R0
	pop,			Single_Reg,			R1
	add,			Reg_Reg,			R0,							R1
	ret,			Single_Reg,			R0
//----------------------------END FIBONACCI_SERIES--------------------------------------



//--------------------------------------------------------------------------------------
:power_r:
	pop,			Single_Reg,			R0		//Power
	pop,			Single_Reg,			R1		//Base
	cmp,			Reg_Const,			R0,							0
	jmp,			Single_Const,		JMP_EQUALS,					else
	mem,			Reg_Reg,			R2,							R0			//Copy power
	dec,			Single_Reg,			R2
	call,			Const_Const,		power_r,					2,			Single_Reg,R1,		Single_Reg,R2
	mem,			Reg_Reg,			R3,							R1			//Copy Base
	mem,			Reg_Reg,			R4,							RV			//Copy return value
	mul,			Reg_Reg,			R3,							R4
	ret,			Single_Reg,			R3
:else:
	ret,			Single_Const,		1
//----------------------------END FIBONACCI_SERIES--------------------------------------



//--------------------------------------------------------------------------------------
:__main__:
	call,				Const_Const,		fibonacci_series,			1,			Single_Const,5

	call,				Const_Const,		power_r,					2,			Single_Const,2,		Single_Const,3
	cmd,				Const_Addr,			PrintStringToConsole,		pow_text
	cmd,				Const_Reg,			PrintIntToConsole,			RV
	cmd,				Const_Const,		PrintNewLineToConsole,		0

	//dec,				Single_Addr,		0x00FF

	call,				Const_Const,		fibonacci_series,			1,			Single_Const,7

	ret,				Single_Const,		0xCACA
//------------------------------------END __MAIN__--------------------------------------



.close_include_guard