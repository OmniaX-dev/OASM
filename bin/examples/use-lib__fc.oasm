req,                 REQ_ALL,                    1536
call,  Const_Const,   __load__,  0x0000
@@__om_included_file_here(examples/use-lib.oasm)
.include_guard(__use_lib__oasm__)

.command(request, ALL=1536)

.include [sys/system.oasm]
@@__om_included_file_here(ostd/sys/system.oasm)
.include_guard(__sys__oasm__)

@@_export_start
.alias __OM_STABLE = 0x0000
.alias __OM_EXPERIMENTAL = 0x0001
.alias __OM_DEV = 0x0002

.ifdef __oasm_experimental
@@__om_space__@@
.elifdef __oasm_dev
@@__om_space__@@
.else
.alias __OMX_VER = 0x0000
.endif

.macro Load(__addr, __const_val) mem, Addr_Const, $(__addr), $(__const_val)
.macro LoadString(__addr, __string)	 lda_str, $(__string) "&#" mem, Addr_Reg, $(__addr), R31

.macro ArrayAt(__arr, __index, __out_addr) mem, Addr_Const, $(__out_addr), $(__arr) "&#" add, Addr_Addr, $(__out_addr), $(__index)
@@_export_end

.close_include_guard
@@__om_end_included_file_here
.include [sys/timing.oasm]
@@__om_included_file_here(ostd/sys/timing.oasm)
.include_guard(__timing__oasm__)

.include [system.oasm]
@@__om_included_file_here(ostd/sys/system.oasm)
.include_guard(__sys__oasm__)
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
@@__om_space__@@
.close_include_guard
@@__om_end_included_file_here

//FPS_Manager structure
.alias __OM_FPS_DELTA_BASE = 1000
.data = reserve(__om_fps, __om_fps_delta)

@@_export_start
.macro SetFPS(__fps) mem,Addr_Const,__om_fps,$(__fps) "&#" mem,Addr_Const,__om_fps_delta,1000 "&#" div,Addr_Addr,__om_fps_delta,__om_fps
.macro CurrentTime(__out_addr) cmd,Const_Const,GetRunningTime,0 "&#" mem,Addr_Reg,$(__out_addr),R31
.macro WaitForFrame(__time_1, __time_2) call,Const_Const,__om_delay_on_time_diff,2,Single_Addr,$(__time_1),Single_Addr,$(__time_2)
@@_export_end

//Function to sleep for the rest of the frame if it took less time than __om_fps_delta
:__om_delay_on_time_diff:
pop, Single_Reg, R29
pop, Single_Reg, R28
mem, Reg_Reg,	R27,R29

sub,		Reg_Reg,			R27,					R28

cmp,		Reg_Addr,			R27,					__om_fps_delta
jmp,		Single_Const,		JMP_GREATER_OR_EQUALS,	__exceeded_frame_time

mem,		Reg_Addr,			R28,					__om_fps_delta
sub,		Reg_Reg,			R28,					R27
mem,		Reg_Const,			R31,					TU_MILLISECONDS
cmd,		Const_Reg,			Sleep,					R28
ret,		Single_Const,		True
:__exceeded_frame_time:
ret, 		Single_Const, 		False
//end __om_delay_on_time_diff

.close_include_guard
@@__om_end_included_file_here
//.include [test-lib.oh]
.include [ostdlib.oh]
@@__om_included_file_here(examples/ostdlib.oh)
.include_guard(__ostdlib_oslib)


$.extern(sub-routine, ostdlib::__test_function_1, 0x0000)
$.extern(sub-routine, ostdlib::__test_function_2, 0x000F)
$.extern(sub-routine, ostdlib::__test_function_3, 0x0026)
$.extern(sub-routine, ostdlib::__init__, 0x0045)


.close_include_guard
@@__om_end_included_file_here

//$.extern(sub-routine, test-lib::__init__, 0x0045)

.data = reserve(time1, time2, str, count)
.data = load_string(str, "Ciao Ciccio")

:__main__:
mem,Addr_Const,__om_fps,10
mem,Addr_Const,__om_fps_delta,1000
div,Addr_Addr,__om_fps_delta,__om_fps

mem, Addr_Const, count, 0

:loop:
cmd,Const_Const,GetRunningTime,0
mem,Addr_Reg,time1,R31

cmd, Const_Addr, PrintStringToConsole, str
cmd, Const_Const, PrintNewLineToConsole, 0
call, Const_Const, ::__test_function_1, 0
call, Const_Const, ::__test_function_2, 0
call, Const_Const, ::__test_function_3, 0
call, Const_Const, ostdlib::__test_function_1, 0
call, Const_Const, ostdlib::__test_function_2, 0
call, Const_Const, ostdlib::__test_function_3, 0
inc, Single_Addr, count
cmd,Const_Const,GetRunningTime,0
mem,Addr_Reg,time2,R31

no_op
call,Const_Const,__om_delay_on_time_diff,2,Single_Addr,time1,Single_Addr,time2
cmp, Addr_Const, count, 5
jmp, Single_Const, JMP_LESS_OR_EQUALS, loop
ret, Single_Const, 0

.close_include_guard
@@__om_end_included_file_here
:__load__:
reserve,  Single_Const,  0x0002
reserve,  Single_Const,  0x0004
lda_str,                    0x4369,0x616F,0x2043,0x6963,0x6369,0x6F00
mem,     Addr_Reg,    str,    R31
call, Const_Const, test-lib::__init__, 0
call, Const_Const, ostdlib::__init__, 0
call,  Const_Const,  __main__,  0x0000
end,  Single_Reg,   RV
$.extern(sub-routine, test-lib::__init__, 0x0045)
$.extern(sub-routine, ostdlib::__init__, 0x0045)
