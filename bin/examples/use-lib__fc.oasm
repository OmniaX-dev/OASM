req,                 REQ_ALL,                    1536
call,  Const_Const,   __load__,  0x0000
@@__om_included_file_here(examples/use-lib.oasm)
.include_guard(__use_lib__oasm__)

.command(request, ALL=1536)

.include [sys/system.oh]
@@__om_included_file_here(ostd/sys/system.oh)
.include_guard(__system__oh__)

.alias __OM_STABLE = 0x0000
.alias __OM_EXPERIMENTAL = 0x0001
.alias __OM_DEV = 0x0002

.ifdef __oasm_experimental
@@__om_space__@@
.elifdef __oasm_dev
@@__om_space__@@
.else
.alias __OMX_VER = 0x0000
.endif

.macro Load(__addr, __const_val) mem, Addr_Const, $(__addr), $(__const_val)
.macro LoadString(__addr, __string)	 lda_str, $(__string) "&#" mem, Addr_Reg, $(__addr), R31

.macro ArrayAt(__arr, __index, __out_addr) mem, Addr_Const, $(__out_addr), $(__arr) "&#" add, Addr_Addr, $(__out_addr), $(__index)

.close_include_guard
@@__om_end_included_file_here
.include [sys/timing.oh]
@@__om_included_file_here(ostd/sys/timing.oh)
.include_guard(__timing__oh__)

//FPS_Manager structure
.alias __OM_FPS_DELTA_BASE = 1000

.macro SetFPS(__fps) mem,Addr_Const,::__om_fps,$(__fps) "&#" mem,Addr_Const,::__om_fps_delta,1000 "&#" div,Addr_Addr,::__om_fps_delta,::__om_fps
.macro CurrentTime(__out_addr) cmd,Const_Const,GetRunningTime,0 "&#" mem,Addr_Reg,$(__out_addr),R31
.macro WaitForFrame(__time_1, __time_2) call,Const_Const,::__om_delay_on_time_diff,2,Single_Addr,$(__time_1),Single_Addr,$(__time_2)

.close_include_guard
@@__om_end_included_file_here
.include [gfx/base-video.oh]
@@__om_included_file_here(ostd/gfx/base-video.oh)
.include_guard(__base_video__oh__)

.macro InitVideo(__video_mode) cmd, Const_Const, SetVideoMode, $(__video_mode) "&#" call, Const_Const, ::__om_load_screen_size__, 0 "&#" call, Const_Const, ::__om_load_colors__, 0
.macro SetVideoMode(__video_mode) cmd, Const_Const, SetVideoMode, $(__video_mode)
.macro PlotChar(__x, __y, __char, __bg_col, __fg_col) call, Const_Const, ::__om_plot_char__, 5, Single_Addr, $(__x), Single_Addr, $(__y), Single_Addr, $(__char), Single_Addr, $(__bg_col), Single_Addr, $(__fg_col)
.macro GetScreenSize(__out_x, __out_y) mem, Addr_Addr, $(__out_x), ::%__om_screen_size[0] "&#" mem, Addr_Addr, $(__out_y), ::%__om_screen_size[1]
.alias ClearScreen = cmd,	Const_Const, RefreshScreen,	 0
.alias Draw = cmd, Const_Const, Draw, 0

.close_include_guard
@@__om_end_included_file_here
.include [gfx/colors.oh]
@@__om_included_file_here(ostd/gfx/colors.oh)
.include_guard(__colors__oh__)

.alias OM_GREY = 0x0
.alias OM_RED = 0x1
.alias OM_GREEN = 0x2
.alias OM_YELLOW = 0x3
.alias OM_BLUE = 0x4
.alias OM_MAGENTA = 0x5
.alias OM_CYAN = 0x6
.alias OM_WHITE = 0x7
.alias OM_BRIGHT_GREY = 0x8
.alias OM_BRIGHT_RED = 0x9
.alias OM_BRIGHT_GREEN = 0xA
.alias OM_BRIGHT_YELLOW = 0xB
.alias OM_BRIGHT_BLUE = 0xC
.alias OM_BRIGHT_MAGENTA = 0xD
.alias OM_BRIGHT_CYAN = 0xE
.alias OM_BRIGHT_WHITE = 0xF

.close_include_guard
@@__om_end_included_file_here

.data = reserve(time1, time2, screenx, screeny, rndx, rndy, rndc)

:__main__:
mem,Addr_Const,::__om_fps,30
mem,Addr_Const,::__om_fps_delta,1000
div,Addr_Addr,::__om_fps_delta,::__om_fps

cmd, Const_Const, SetVideoMode, VIDEO_MODE_ASCII_GRID
call, Const_Const, ::__om_load_screen_size__, 0
call, Const_Const, ::__om_load_colors__, 0

mem, Addr_Addr, screenx, ::%__om_screen_size[0]
mem, Addr_Addr, screeny, ::%__om_screen_size[1]


:loop:
cmd,Const_Const,GetRunningTime,0
mem,Addr_Reg,time1,R31

cmd,	Const_Const, RefreshScreen,	 0
mem, Reg_Const, R30, 0
mem, Reg_Addr, R31, screenx
cmd, Const_Const, Random, rndx
mem, Reg_Addr, R31, screeny
cmd, Const_Const, Random, rndy
mem, Reg_Const, R30, $.char('A')
mem, Reg_Addr, R31, $.char('Z')
cmd, Const_Const, Random, rndc
call, Const_Const, ::__om_plot_char__, 5, Single_Addr, rndx, Single_Addr, rndy, Single_Addr, rndc, Single_Addr, ::Yellow, Single_Addr, ::Red
cmd, Const_Const, Draw, 0
cmd,Const_Const,GetRunningTime,0
mem,Addr_Reg,time2,R31

no_op
call,Const_Const,::__om_delay_on_time_diff,2,Single_Addr,time1,Single_Addr,time2
jmp, Single_Const, JMP_UNCONDITIONAL, loop
ret, Single_Const, 0

.close_include_guard
@@__om_end_included_file_here
:__load__:
reserve,  Single_Const,  0x0007
call, Const_Const, ostd::__init__, 0
call,  Const_Const,  __main__,  0x0000
end,  Single_Reg,   RV
$.extern(sub-routine, ostd::__init__, 0x02B3)
