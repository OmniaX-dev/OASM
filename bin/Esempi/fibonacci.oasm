.include_guard(__FIBONACCI_OASM__)  //Used to ensure that a file gets included only once

//In this next section we will find all the include directives
//In this case, all of this includes are part of the standard library (ostd)
//And can only be used if the code is linked against the ostd.oslib file

//System header, containing useful functionality
.include [sys/system.oh]

//Timing header, containing functions to handle the timing of your code
.include [sys/timing.oasm]

//This command is used to request how big the VirtualMemory assigned to this process needs to be
//Using the 'ALL' parameter, you are setting the same value for Stack and Heap
.command(request, all=512)

//Reserve some memory cells as variable names
.data = reserve(str_title, t1, t2, next, time1, time2)

//Load a string in memory, and store it's pointer inside a variable
.data = load_string(str_title, "Fibonacci series:")

//fibonacci_series sub-routine
:fibonacci_series:
	//Pop the parameter from the stack into the R8 Register
	pop, Single_Reg, R8

	//Set an alias for the R8 register (just for easier reference)
	.alias N = R8

	//Move '1' into the R9 register, we will use this register as the index for the loop
	mem, Reg_Const, R9, 1

	//Set an alias for the R9 register (just for easier reference)
	.alias i = R9

	:for_loop:
		//This macro stores the current time in milliseconds, inside a variable
		@CurrentTime(time1)
		cmp, Reg_Reg, #i, #N			//Compare the index with the max-count 
		jmp, Single_Const, JMP_GREATER, end_loop		//Jump to the end of the loop if the index is greater

		//----------------------------------------------------------------------------
		//This next block is composed of two if-statements used to check for the first
		//and second number of the series (0 and 1) since they are special cases
		cmp, Reg_Const, #i, 1							
		jmp, Single_Const, JMP_NOT_EQUALS, end_if_1
			cmd, Const_Addr, PrintIntToConsole, t1
			cmd, Const_Const, PrintNewLineToConsole, 0
			jmp, Single_Const, JMP_UNCONDITIONAL, continue_label
		:end_if_1:
		cmp, Reg_Const, #i, 2
		jmp, Single_Const, JMP_NOT_EQUALS, end_if_2
			cmd, Const_Addr, PrintIntToConsole, t2
			cmd, Const_Const, PrintNewLineToConsole, 0
			jmp, Single_Const, JMP_UNCONDITIONAL, continue_label
		:end_if_2:
		//----------------------------------------------------------------------------

		mem, Addr_Addr, next, t1			//Copy the value in 'next' into 't1'
		add, Addr_Addr, next, t2			//Add the value in 't1' to 'next'
		mem, Addr_Addr, t1, t2				//Copy the value in 't2' into 't1'
		mem, Addr_Addr, t2, next			//Copy the value in 'next' into t2
		cmd, Const_Addr, PrintIntToConsole, next		//VirtualMachine command (kind of like an interrupt)
														//used to print an integer to the console

		cmd, Const_Const, PrintNewLineToConsole, 0		//VirtualMachine command to print a new-line character to the console
	:continue_label:
		@CurrentTime(time2)
		inc, Single_Reg, #i				//Increment the value in the 'i' alias (corresponds to R9)

		//This macro takes two time stamps, and calculates how long it needs to wait (if it needs to)
		//based on the value set with the SetFPS(...) macro
		@WaitForFrame(time1, time2)
		jmp, Single_Const, JMP_UNCONDITIONAL, for_loop			//Unconditional jump to the beginning of the loop
	:end_loop:

	//Return value for the fibonacci_series sub-routine is 0
	ret, Single_Const, 0x0000
//End fibonacci_series

//Process entry point
:__main__:
	//Set the amount of times per second that the code should run, when using the 'WaitForFrame(...)' macro
	@SetFPS(5)

	//The 'Load' macro is used to assign a value to a variable
	@Load(t1, 0)
	@Load(t2, 1)
	@Load(next, 0)

	cmd, Const_Addr, PrintStringToConsole, str_title		//VirtualMachine command to print a string to the console
	cmd, Const_Const, PrintNewLineToConsole, 0
	call, Const_Const, fibonacci_series, 1, Single_Const, 25		//Call the fibonacci_series sub-routine
																	//Passing the constant value '25' as the 
																	//Maximum count for the series

	cmd, Const_Const, PrintNewLineToConsole, 0

	//Return value for the __main__ function
	ret, Single_Const, 0x0000
//End __main__

.close_include_guard