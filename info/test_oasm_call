			MemAddress heap_addr = D__HEAP_SPACE_START + 1;
			MemAddress var_1 = heap_addr++;
			MemAddress var_2 = heap_addr++;
			MemAddress var_3 = heap_addr++;
			MemAddress var_4 = heap_addr++;
			MemAddress str_ptr = heap_addr++;
			TMemoryList str = BitEditor::stringToConstSream("Hello World!");
			proc.m_code = {

//-----CODE START-----
p_inst(req), 		p_flg(req_heap), 											63,
p_inst(req), 		p_flg(req_stack), 											63,

p_inst(call), 		p_addr(ConstConst), 										(word)(proc.m_codeAddr + 28), 			0x0000,

p_inst(lda_str),	str_ptr,  													str[0],str[1],str[2],str[3],str[4],str[5],str[6],
p_inst(cmd), 		p_addr(ConstRef), 											p_cmd(PrintStringToConsole), 			str_ptr,
p_inst(no_op),

p_inst(jmp), 		p_addr(SingleOp_const), 									p_flg(jmp_unconditional), 		(word)(proc.m_codeAddr + 63),
p_inst(mem), 		p_addr(ConstToAddr), 										var_1, 							'O',
p_inst(cmd), 		p_addr(ConstAddr), 											p_cmd(PrintCharToConsole), 		var_1,
p_inst(mem), 		p_addr(ConstToAddr), 										var_2, 							'a',
p_inst(cmd), 		p_addr(ConstAddr), 											p_cmd(PrintCharToConsole), 		var_2,
p_inst(mem), 		p_addr(ConstToAddr), 										var_3, 							'S',
p_inst(cmd), 		p_addr(ConstAddr), 											p_cmd(PrintCharToConsole), 		var_3,
p_inst(mem), 		p_addr(ConstToAddr), 										var_4, 							'm',
p_inst(cmd), 		p_addr(ConstAddr), 											p_cmd(PrintCharToConsole), 		var_4,
p_inst(ret_m), 		p_addr(b_SingleOp_MSB_mask) | p_addr(SingleOp_const), 		0xEF77,

p_inst(end), 		p_addr(SingleOp_const), 									0xCACA
//-----CODE END-------

			};














MemAddress var_1 = heap_addr++;
			ram.set(proc, var_1, eMemCellType::Heap, eMemState::Free, eMemCellFlag::UsedSingleHeapCell);
			MemAddress var_2 = heap_addr++;
			ram.set(proc, var_2, eMemCellType::Heap, eMemState::Free, eMemCellFlag::UsedSingleHeapCell);

			//----------------------------------------------------------------------------------------
			TMemoryList str = BitEditor::stringToConstSream("Hello World!");
			proc.m_code = {

//-----CODE START-----
p_inst(req), 		p_flg(req_heap), 											63,
p_inst(req), 		p_flg(req_stack), 											63,

p_inst(lda_str),	str[0],str[1],str[2],str[3],str[4],str[5],str[6],
p_inst(mem),		p_addr(RegToAddr),											var_1,									p_reg(R31),
p_inst(cmd),		p_addr(ConstAddr),											p_cmd(PrintStringToConsole),			var_1,
p_inst(lda_str),	0x4142, 0x6100,
p_inst(mem),		p_addr(RegToAddr),											var_2,									p_reg(R31),
p_inst(cmd),		p_addr(ConstAddr),											p_cmd(PrintStringToConsole),			var_2,
p_inst(realloc),	p_addr(ConstToPtr)	,										var_1,									8,
p_inst(mem),		p_addr(RegToAddr),											var_1,									p_reg(R31),
p_inst(cmd),		p_addr(ConstAddr),											p_cmd(PrintStringToConsole),			var_1,

p_inst(free),		p_addr(SingleOp_addr),										var_1,
p_inst(free),		p_addr(SingleOp_addr),										var_2,

p_inst(end), 		p_addr(SingleOp_const), 									0xCACA
//-----CODE END-------

			};
			//----------------------------------------------------------------------------------------